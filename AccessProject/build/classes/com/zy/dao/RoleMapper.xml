<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zy.dao.RoleMapper" >
  <resultMap id="roleMap" type="com.zy.vo.Role" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
    <result column="role_code" property="roleCode" jdbcType="VARCHAR" />
    <result column="role_state" property="roleState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <collection property="userInfo" ofType="UserInfo">
				<result column="nick_name" property="nickName"></result>
	</collection>
  </resultMap>
<resultMap id="authinfoMap" type="com.zy.vo.AuthInfo" >
    <id column="auth_id" property="authId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="auth_name" property="authName" jdbcType="VARCHAR" />
    <result column="auth_desc" property="authDesc" jdbcType="VARCHAR" />
    <result column="auth_grade" property="authGrade" jdbcType="INTEGER" />
    <result column="auth_type" property="authType" jdbcType="CHAR" />
    <result column="auth_url" property="authUrl" jdbcType="VARCHAR" />
    <result column="auth_code" property="authCode" jdbcType="VARCHAR" />
    <result column="auth_order" property="authOrder" jdbcType="INTEGER" />
    <result column="auth_state" property="authState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="roleauth" type="com.zy.vo.RoleAuth" >
    <id column="role_auth_id" property="roleAuthId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="auth_id" property="authId" jdbcType="INTEGER" />
  </resultMap>
   <sql id="sql_query">
  	and us.user_id=r.create_by 		

  			<if test="role.roleName!=null">
  				and role_name like concat("%",#{role.roleName},"%")
  			</if>
	  		<if test="role.roleState!=null">
	  				and role_state=#{role.roleState}
	  		</if>
	  		<if test="page!=null">
	  					limit #{page.limitIndex},#{page.pageSize}
	  		</if>
  </sql>
    <select id="findrole"  parameterType="HashMap"  resultMap="roleMap"> 
   	SELECT r.*,us.nick_name FROM role r ,user_info us
 		<where>
            <include refid="sql_query"></include>
        </where> 
   </select>
   <select id="findrolename" parameterType="String" resultMap="roleMap">
   	SELECT * from role 				<!-- 查用户名是否重复 -->
   		where role_name=#{name}
   </select>
   <select id="findrolecode" parameterType="String" resultMap="roleMap">
   	SELECT * from role 				<!-- 查用户名是否重复 -->
   		where role_code=#{code}
   </select>
   <insert id="addrole"   parameterType="Role"  >
		<!-- 添加角色 -->
			INSERT INTO role(role_name,role_desc,role_code,create_by)VALUES(#{roleName},#{roleDesc},#{roleCode},#{createBy})	
   </insert>
   <update id="uprole"  parameterType="Role" ><!-- 修改角色 -->
   			UPDATE role SET role_desc=#{roleDesc}
  				 WHERE role_name =#{roleName}
   </update>
      <update id="upstaterole"  parameterType="Role" ><!-- 修改状态-->
   			UPDATE role SET role_state=#{roleState}
  				 WHERE role_id =#{roleId}
   </update>
   <delete id="deleterole" parameterType="Integer"><!-- 删除角色 -->
   			delete from role where role_id =#{roleId}
   </delete>
   
   <select id="findauthinfo" resultMap="authinfoMap"><!-- 查询全部权限 -->
			select * from auth_info where auth_state=1
	</select>
	<select id="findroleAnth" parameterType="Integer"  resultMap="roleauth"><!-- 查询用户权限 -->
			select * from role_auth where role_id =#{roleId}
	</select>
   <delete id="deleteroleAuth" parameterType="Integer" ><!-- 删除当前用户权限  -->
			delete FROM role_auth WHERE role_id=#{roleId}	
	</delete>	
	<insert id="inserteroleAuth" parameterType="HashMap"><!-- 添加用户权限 -->
				INSERT INTO role_auth(auth_id,role_id)VALUES(#{authid},#{roleId})
	</insert>	
   
 </mapper>