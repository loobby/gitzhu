<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zy.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.zy.vo.UserInfo" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="group_id" property="groupId" jdbcType="INTEGER" />
    <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
    <result column="user_code" property="userCode" jdbcType="VARCHAR" />
    <result column="user_pwd" property="userPwd" jdbcType="VARCHAR" />
    <result column="user_type" property="userType" jdbcType="CHAR" />
    <result column="user_state" property="userState" jdbcType="CHAR" />
    <result column="is_delete" property="isDelete" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <collection property="role" ofType="Role">
				<result column="role_name" property="roleName"></result>
	</collection>
			<collection property="usergroup" ofType="UserGroup">
				<result column="group_name" property="groupName"></result>
			</collection>
  </resultMap>
  <resultMap id="RoleMapp" type="com.zy.vo.Role" >
    <id column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
    <result column="role_code" property="roleCode" jdbcType="VARCHAR" />
    <result column="role_state" property="roleState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
    <resultMap id="userGroupMap" type="com.zy.vo.UserGroup" >
    <id column="group_id" property="groupId" jdbcType="INTEGER" />
    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
    <result column="group_code" property="groupCode" jdbcType="VARCHAR" />
    <result column="group_desc" property="groupDesc" jdbcType="VARCHAR" />
    <result column="group_state" property="groupState" jdbcType="CHAR" />
  </resultMap>
  <resultMap id="authinfoMap" type="com.zy.vo.AuthInfo" >
    <id column="auth_id" property="authId" jdbcType="INTEGER" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="auth_name" property="authName" jdbcType="VARCHAR" />
    <result column="auth_desc" property="authDesc" jdbcType="VARCHAR" />
    <result column="auth_grade" property="authGrade" jdbcType="INTEGER" />
    <result column="auth_type" property="authType" jdbcType="CHAR" />
    <result column="auth_url" property="authUrl" jdbcType="VARCHAR" />
    <result column="auth_code" property="authCode" jdbcType="VARCHAR" />
    <result column="auth_order" property="authOrder" jdbcType="INTEGER" />
    <result column="auth_state" property="authState" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
   <resultMap id="UserAuthMap" type="com.zy.vo.UserAuth" >
    <id column="user_auth_id" property="userAuthId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="auth_id" property="authId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, group_id, nick_name, user_code, user_pwd, user_type, user_state, is_delete, 
    create_by, create_time, update_by, update_time
  </sql>
   <select id="selectL"  parameterType="UserInfo" resultMap="BaseResultMap">
    select *  from user_info
		    where user_code = #{userCode}
		    	      and user_pwd = MD5(#{userPwd})
		    
    <!-- <include refid="Base_Column_List" /> -->
		  
	   <!--   <if test="userinfo.user_pwd!= null" > -->
	<!--    	 </if> -->
  </select>
					<!-- and user_code like concat("%",#{userCode},"%") -->
 
  
  
  <select id="findRoletype" resultMap="RoleMapp"><!-- //全查角色表 -->
  			select * from Role
  </select>
 
 
  
  <sql id="sql_query">
  	and is_delete=0 and ui.group_id =ug.group_id			
				AND ro.role_id	= ui.user_type 
  	<!-- 	<if test="null!=user"> -->
  			<if test="user.userCode!=null">
  				and user_code like concat("%",#{user.userCode},"%")
  			</if>
	  		<if test="user.userType!=null">
	  				and user_Type=#{user.userType}
	  		</if>
	  		<if test="user.userState!=null">
	  				and user_state=#{user.userState}
	  		</if>
	  		<if test="page!=null">
	  					limit #{page.limitIndex},#{page.pageSize}
	  		</if>
<!--   		</if> -->
  </sql>
  
  
  <select id="findusRoUg"  parameterType="HashMap"  resultMap="BaseResultMap"><!-- 查询用户 -->
  	SELECT ui.*,ug.group_name,ro.role_name  FROM USer_info ui, user_group ug ,role ro
		<where>
            <include refid="sql_query"></include>
        </where>  
  </select>
 
 
 
  
   <select id="findIdByRoleName" parameterType="String" resultMap="RoleMapp"><!-- 查询用户类型id -->
	  	select * from role where role_name=#{userType}
	</select>
	
   <select id="findIdByuserGroup" resultMap="userGroupMap"><!-- 查询部门类型 -->
	  	SELECT * FROM user_group
	</select>
  
  <update id="insertUserINFo"><!--  修改user info表-->
  			UPDATE user_info SET user_code=#{userCode},nick_name=#{nickName},group_id=#{groupId}
  				 WHERE user_id =#{userId}
  </update>
  
  <update id="deleteUserINFo" parameterType="Integer"><!--  逻辑删除user info表-->
  			UPDATE user_info SET is_delete=1
  				 WHERE user_id =#{userId}
  </update>
  
  <update id="StateUserINFo"  parameterType="HashMap"><!--  修改用户状态-->
  			UPDATE user_info SET user_state=#{UserState}
  				 WHERE user_id =#{UserId}
  </update>
  
  <select id="selectcode" parameterType="String" resultMap="BaseResultMap"><!-- 查询用户名是否存在 -->
  			select * from  user_info 
  			    	where  user_code =#{usercode}
  </select>
							<!--添加用户  -->

	<insert id="insertUserinfo" parameterType="UserInfo">
		INSERT INTO user_info(nick_name,user_code,user_pwd,group_id,user_type)VALUES(#{nickName},#{userCode},MD5(#{userPwd}),#{groupId},3)
	</insert>
	 <update id="updateuserpwd"  parameterType="Integer"><!-- //重置用户密码-->
  			UPDATE user_info SET user_pwd=MD5(123456)
  				 WHERE user_id =#{UserId}
  </update>		
		<select id="finduserRole" parameterType="Integer" resultType="String"><!-- 查询当前用户角色 -->
			SELECT GROUP_CONCAT(role_id SEPARATOR ',') FROM user_role WHERE user_id=#{UserId}
		</select>
	
	
	<delete id="deleteuserRole" parameterType="Integer"><!-- 删除当前用户角色 -->
			delete FROM user_role WHERE user_id=#{UserId}	
	</delete>	
	<insert id="inserteuserRole" parameterType="HashMap"><!-- 添加用户角色 -->
				INSERT INTO user_role(role_id,user_id)VALUES(#{roleId},#{userId})
	</insert>	
	
	
	<select id="findauthinfo" resultMap="authinfoMap"><!-- 查询全部权限 -->
			select * from auth_info where auth_state=1
	</select>
	<select id="finduserAnth" parameterType="Integer"  resultMap="UserAuthMap"><!-- 查询用户权限 -->
			select * from user_auth where user_id =#{userId}
	</select>
	<delete id="deleteuserAuth" parameterType="Integer" ><!-- 删除当前用户权限  -->
			delete FROM user_auth WHERE user_id=#{UserId}	
	</delete>	
	<insert id="inserteuserAuth" parameterType="HashMap"><!-- 添加用户权限 -->
				INSERT INTO user_auth(auth_id,user_id)VALUES(#{authid},#{userId})
	</insert>	
</mapper>